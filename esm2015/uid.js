/**
 * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
const ɵ0 = (val, index) => ('0' + (index).toString(16)).slice(-2);
// A copy of @ckeditor/ckeditor5-utils/src/uid.js
// A hash table of hex numbers to avoid using toString() in uid() which is costly.
// [ '00', '01', '02', ..., 'fe', 'ff' ]
const HEX_NUMBERS = new Array(256).fill(0)
    .map(ɵ0);
/**
 * Returns a unique id. The id starts with an "e" character and a randomly generated string of
 * 32 alphanumeric characters.
 *
 * **Note**: The characters the unique id is built from correspond to the hex number notation
 * (from "0" to "9", from "a" to "f"). In other words, each id corresponds to an "e" followed
 * by 16 8-bit numbers next to each other.
 *
 * @returns An unique id string.
 */
export default function uid() {
    // Let's create some positive random 32bit integers first.
    //
    // 1. Math.random() is a float between 0 and 1.
    // 2. 0x100000000 is 2^32 = 4294967296.
    // 3. >>> 0 enforces integer (in JS all numbers are floating point).
    //
    // For instance:
    //		Math.random() * 0x100000000 = 3366450031.853859
    // but
    //		Math.random() * 0x100000000 >>> 0 = 3366450031.
    const r1 = Math.random() * 0x100000000 >>> 0;
    const r2 = Math.random() * 0x100000000 >>> 0;
    const r3 = Math.random() * 0x100000000 >>> 0;
    const r4 = Math.random() * 0x100000000 >>> 0;
    // Make sure that id does not start with number.
    return 'e' +
        HEX_NUMBERS[r1 >> 0 & 0xFF] +
        HEX_NUMBERS[r1 >> 8 & 0xFF] +
        HEX_NUMBERS[r1 >> 16 & 0xFF] +
        HEX_NUMBERS[r1 >> 24 & 0xFF] +
        HEX_NUMBERS[r2 >> 0 & 0xFF] +
        HEX_NUMBERS[r2 >> 8 & 0xFF] +
        HEX_NUMBERS[r2 >> 16 & 0xFF] +
        HEX_NUMBERS[r2 >> 24 & 0xFF] +
        HEX_NUMBERS[r3 >> 0 & 0xFF] +
        HEX_NUMBERS[r3 >> 8 & 0xFF] +
        HEX_NUMBERS[r3 >> 16 & 0xFF] +
        HEX_NUMBERS[r3 >> 24 & 0xFF] +
        HEX_NUMBERS[r4 >> 0 & 0xFF] +
        HEX_NUMBERS[r4 >> 8 & 0xFF] +
        HEX_NUMBERS[r4 >> 16 & 0xFF] +
        HEX_NUMBERS[r4 >> 24 & 0xFF];
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NrZWRpdG9yL3VpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7V0FPSSxDQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsR0FBRyxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUMsUUFBUSxDQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFFO0FBTHZFLGlEQUFpRDtBQUVqRCxrRkFBa0Y7QUFDbEYsd0NBQXdDO0FBQ3hDLE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFFLEdBQUcsQ0FBRSxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUU7S0FDNUMsR0FBRyxJQUFvRSxDQUFDO0FBRTFFOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxPQUFPLFVBQVUsR0FBRztJQUMxQiwwREFBMEQ7SUFDMUQsRUFBRTtJQUNGLCtDQUErQztJQUMvQyx1Q0FBdUM7SUFDdkMsb0VBQW9FO0lBQ3BFLEVBQUU7SUFDRixnQkFBZ0I7SUFDaEIsbURBQW1EO0lBQ25ELE1BQU07SUFDTixtREFBbUQ7SUFDbkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFFN0MsZ0RBQWdEO0lBQ2hELE9BQU8sR0FBRztRQUNULFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRSxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjIsIENLU291cmNlIEhvbGRpbmcgc3AuIHogby5vLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZC5cclxuICovXHJcblxyXG4vLyBBIGNvcHkgb2YgQGNrZWRpdG9yL2NrZWRpdG9yNS11dGlscy9zcmMvdWlkLmpzXHJcblxyXG4vLyBBIGhhc2ggdGFibGUgb2YgaGV4IG51bWJlcnMgdG8gYXZvaWQgdXNpbmcgdG9TdHJpbmcoKSBpbiB1aWQoKSB3aGljaCBpcyBjb3N0bHkuXHJcbi8vIFsgJzAwJywgJzAxJywgJzAyJywgLi4uLCAnZmUnLCAnZmYnIF1cclxuY29uc3QgSEVYX05VTUJFUlMgPSBuZXcgQXJyYXkoIDI1NiApLmZpbGwoIDAgKVxyXG5cdC5tYXAoICggdmFsLCBpbmRleCApID0+ICggJzAnICsgKCBpbmRleCApLnRvU3RyaW5nKCAxNiApICkuc2xpY2UoIC0yICkgKTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgdW5pcXVlIGlkLiBUaGUgaWQgc3RhcnRzIHdpdGggYW4gXCJlXCIgY2hhcmFjdGVyIGFuZCBhIHJhbmRvbWx5IGdlbmVyYXRlZCBzdHJpbmcgb2ZcclxuICogMzIgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuXHJcbiAqXHJcbiAqICoqTm90ZSoqOiBUaGUgY2hhcmFjdGVycyB0aGUgdW5pcXVlIGlkIGlzIGJ1aWx0IGZyb20gY29ycmVzcG9uZCB0byB0aGUgaGV4IG51bWJlciBub3RhdGlvblxyXG4gKiAoZnJvbSBcIjBcIiB0byBcIjlcIiwgZnJvbSBcImFcIiB0byBcImZcIikuIEluIG90aGVyIHdvcmRzLCBlYWNoIGlkIGNvcnJlc3BvbmRzIHRvIGFuIFwiZVwiIGZvbGxvd2VkXHJcbiAqIGJ5IDE2IDgtYml0IG51bWJlcnMgbmV4dCB0byBlYWNoIG90aGVyLlxyXG4gKlxyXG4gKiBAcmV0dXJucyBBbiB1bmlxdWUgaWQgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdWlkKCk6IHN0cmluZyB7XHJcblx0Ly8gTGV0J3MgY3JlYXRlIHNvbWUgcG9zaXRpdmUgcmFuZG9tIDMyYml0IGludGVnZXJzIGZpcnN0LlxyXG5cdC8vXHJcblx0Ly8gMS4gTWF0aC5yYW5kb20oKSBpcyBhIGZsb2F0IGJldHdlZW4gMCBhbmQgMS5cclxuXHQvLyAyLiAweDEwMDAwMDAwMCBpcyAyXjMyID0gNDI5NDk2NzI5Ni5cclxuXHQvLyAzLiA+Pj4gMCBlbmZvcmNlcyBpbnRlZ2VyIChpbiBKUyBhbGwgbnVtYmVycyBhcmUgZmxvYXRpbmcgcG9pbnQpLlxyXG5cdC8vXHJcblx0Ly8gRm9yIGluc3RhbmNlOlxyXG5cdC8vXHRcdE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA9IDMzNjY0NTAwMzEuODUzODU5XHJcblx0Ly8gYnV0XHJcblx0Ly9cdFx0TWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwID0gMzM2NjQ1MDAzMS5cclxuXHRjb25zdCByMSA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcclxuXHRjb25zdCByMiA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcclxuXHRjb25zdCByMyA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcclxuXHRjb25zdCByNCA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcclxuXHJcblx0Ly8gTWFrZSBzdXJlIHRoYXQgaWQgZG9lcyBub3Qgc3RhcnQgd2l0aCBudW1iZXIuXHJcblx0cmV0dXJuICdlJyArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gMCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gOCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gMTYgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDI0ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiAwICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiA4ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiAxNiAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gMjQgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIzID4+IDAgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIzID4+IDggJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHIzID4+IDE2ICYgMHhGRiBdICtcclxuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiAyNCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gMCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gOCAmIDB4RkYgXSArXHJcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gMTYgJiAweEZGIF0gK1xyXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDI0ICYgMHhGRiBdO1xyXG59XHJcbiJdfQ==